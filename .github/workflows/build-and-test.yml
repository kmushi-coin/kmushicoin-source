name: CI Actions for KTV

on: [push, pull_request]
jobs:
  lint:
    env:
      SHELLCHECK_VERSION: v0.7.1
      LC_ALL: C
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Initialize Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install codespell==2.2.5
          pip install flake8==5.0.4
          pip install mypy==1.4.1
          pip install vulture==2.6
          pip install yq

          curl -sL "https://github.com/koalaman/shellcheck/releases/download/${SHELLCHECK_VERSION}/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz" | tar --xz -xf - --directory /tmp/

      - name: Set TRAVIS_BRANCH workaround env variable
        if: github.event_name == 'pull_request'
        run: echo "TRAVIS_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV

  build_depends:
    name: Depends-${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    needs: lint
    env:
      APT_BASE: ccache
      SDK_URL: https://bitcoincore.org/depends-sources/sdks
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: ARM 32-bit
            os: ubuntu-20.04
            host: arm-linux-gnueabihf
            apt_get: python3 g++-arm-linux-gnueabihf

          - name: AARCH64
            os: ubuntu-20.04
            host: aarch64-linux-gnu
            apt_get: python3 g++-aarch64-linux-gnu

          - name: Win64
            os: ubuntu-20.04
            host: x86_64-w64-mingw32
            apt_get: python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64

          - name: 32-bit + dash
            os: ubuntu-20.04
            host: i686-pc-linux-gnu
            apt_get: g++-multilib python3-zmq

          - name: x86_64 Linux
            os: ubuntu-20.04
            host: x86_64-unknown-linux-gnu
            apt_get: python3-zmq
            dep_opts: DEBUG=1

          - name: macOS 10.12
            os: ubuntu-20.04
            host: x86_64-apple-darwin16
            apt_get: cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools
            XCODE_VERSION: 11.3.1
            XCODE_BUILD_ID: 11C505

    steps:
      - name: Get Source
        uses: actions/checkout@v3

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends --no-upgrade -qq "$APT_BASE" ${{ matrix.config.apt_get }}

      - name: depends cache files
        uses: actions/cache@v3
        with:
          path: |
            depends/built
            depends/sdk-sources
            depends/${{ matrix.config.host }}
          key: ${{ runner.os }}-depends-${{ matrix.config.host }}
          restore-keys: ${{ runner.os }}-depends-${{ matrix.config.host }}

      - name: Build Depends
        run: |
          export LC_ALL=C.UTF-8

          PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
          # Add llvm-symbolizer directory to PATH. Needed to get symbolized stack traces from the sanitizers.
          PATH=$PATH:/usr/lib/llvm-6.0/bin/
          export PATH

          mkdir -p depends/SDKs depends/sdk-sources

          OSX_SDK_BASENAME="Xcode-${{ matrix.config.XCODE_VERSION }}-${{ matrix.config.XCODE_BUILD_ID }}-extracted-SDK-with-libcxx-headers.tar.gz"
          OSX_SDK_PATH="depends/sdk-sources/${OSX_SDK_BASENAME}"

          if [ -n "${{ matrix.config.XCODE_VERSION }}" ] && [ ! -f "$OSX_SDK_PATH" ]; then
            curl --location --fail "${SDK_URL}/${OSX_SDK_BASENAME}" -o "$OSX_SDK_PATH"
          fi

          if [ -n "${{ matrix.config.XCODE_VERSION }}" ] && [ -f "$OSX_SDK_PATH" ]; then
            tar -C "depends/SDKs" -xf "$OSX_SDK_PATH"
          fi

          if [[ ${{ matrix.config.host }} = *-mingw32 ]]; then
            BIN=$(which ${{ matrix.config.host }}-g++-posix)
            sudo update-alternatives --set ${{ matrix.config.host }}-g++ $BIN
          fi

          if [ -z "${{ matrix.config.no_depends }}" ]; then
            make -j2 -C depends HOST=${{ matrix.config.host }} ${{ matrix.config.dep_opts }}
          fi

  build_depends_wallet:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    needs: [lint, build_depends]
    env:
      APT_BASE: ccache
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_SIZE: 500M
      CCACHE_COMPRESS: 1
      PARAMS_DIR: ${{ github.workspace }}/.ktv-params
      WINEDEBUG: fixme-all
      BOOST_TEST_RANDOM: 1 # random seed based on the current time
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: ARM 32-bit [GOAL:install] [no unit or functional tests]
            id: ARM32
            os: ubuntu-20.04
            host: arm-linux-gnueabihf
            apt_get: python3 g++-arm-linux-gnueabihf
            goal: install
            # -Wno-psabi is to disable ABI warnings: "note: parameter passing for argument of type ... changed in GCC 7.1"
            # This could be removed once the ABI change warning does not show up by default
            BITCOIN_CONFIG: "--disable-tests --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --disable-online-rust CXXFLAGS=-Wno-psabi"

          - name: AARCH64 [GOAL:install] [no unit or functional tests]
            id: ARM64
            os: ubuntu-20.04
            host: aarch64-linux-gnu
            apt_get: python3 g++-aarch64-linux-gnu
            goal: install
            BITCOIN_CONFIG: "--disable-tests --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --disable-online-rust"

          - name: Win64 [GOAL:deploy] [no unit or functional tests]
            id: Win64
            os: ubuntu-20.04
            host: x86_64-w64-mingw32
            apt_get: python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64
            symbol_check: true
            goal: ""
            nsis: true
            BITCOIN_CONFIG: "--disable-tests --with-gui=auto --enable-reduce-exports --disable-online-rust"

          - name: x86_64 Linux [GOAL:install] [no unit or functional tests]
            id: Linux-x86_64
            os: ubuntu-20.04
            host: x86_64-unknown-linux-gnu
            apt_get: python3-zmq
            goal: install
            BITCOIN_CONFIG: "--disable-tests --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --disable-online-rust"

          - name: macOS 10.12 [GOAL:deploy] [no unit or functional tests]
            id: macOS10.12
            os: ubuntu-20.04
            host: x86_64-apple-darwin16
            apt_get: cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools
            XCODE_VERSION: 11.3.1
            XCODE_BUILD_ID: 11C505
            symbol_check: true
            goal: deploy
            BITCOIN_CONFIG: "--disable-tests --enable-gui --enable-reduce-exports --enable-werror --disable-online-rust"

    steps:
      - name: Get Source
        uses: actions/checkout@v3

      - name: Setup Environment
        run: |
          if [[ ${{ matrix.config.os }} = ubuntu* ]]; then
            sudo apt-add-repository "ppa:ondrej/php" -y
            sudo apt-get --yes update
            sudo apt-get install --no-install-recommends --no-upgrade -qq "$APT_BASE" ${{ matrix.config.apt_get }}
          fi
          if [[ ${{ matrix.config.os }} = macos* ]]; then
            brew install ${{ matrix.config.brew_install }}
            pip3.8 install ds_store mac_alias
          fi

      - name: depends cache files
        if: matrix.config.no_depends != 1
        uses: actions/cache@v3
        with:
          path: |
            depends/built
            depends/sdk-sources
            depends/${{ matrix.config.host }}
          key: ${{ runner.os }}-depends-${{ matrix.config.host }}
          restore-keys: ${{ runner.os }}-depends-${{ matrix.config.host }}

      - name: ccache cache files
        uses: actions/cache@v3
        with:
          path: |
            .ccache
            .ktv-params
          key: ${{ runner.os }}-depbuild-${{ matrix.config.id }}-ccache
          restore-keys: ${{ runner.os }}-depbuilt-${{ matrix.config.id }}-ccache

      - name: Build Wallet
        run: |
          export LC_ALL=C.UTF-8

          echo $CCACHE_DIR
          echo $PARAMS_DIR

          PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
          # Add llvm-symbolizer directory to PATH. Needed to get symbolized stack traces from the sanitizers.
          PATH=$PATH:/usr/lib/llvm-6.0/bin/
          export PATH

          mkdir -p depends/SDKs depends/sdk-sources

          OSX_SDK_BASENAME="Xcode-${{ matrix.config.XCODE_VERSION }}-${{ matrix.config.XCODE_BUILD_ID }}-extracted-SDK-with-libcxx-headers.tar.gz"
          OSX_SDK_PATH="depends/sdk-sources/${OSX_SDK_BASENAME}"

          if [ -n "${{ matrix.config.XCODE_VERSION }}" ] && [ ! -f "$OSX_SDK_PATH" ]; then
            curl --location --fail "${SDK_URL}/${OSX_SDK_BASENAME}" -o "$OSX_SDK_PATH"
          fi

          if [ -n "${{ matrix.config.XCODE_VERSION }}" ] && [ -f "$OSX_SDK_PATH" ]; then
            tar -C "depends/SDKs" -xf "$OSX_SDK_PATH"
          fi

          if [[ ${{ matrix.config.host }} = *-mingw32 ]]; then
            BIN=$(which ${{ matrix.config.host }}-g++-posix)
            sudo update-alternatives --set ${{ matrix.config.host }}-g++ $BIN
            sudo update-binfmts --import /usr/share/binfmts/wine
          fi

          if [[ ${{ matrix.config.os }} = macos* ]]; then
            CC=${{ matrix.config.cc }}
            CXX=${{ matrix.config.cxx }}
            export CC
            export CXX
          fi

          if [[ ${{ matrix.config.os }} = ubuntu* ]]; then
            OUTDIR_PATH="$GITHUB_WORKSPACE/$GITHUB_RUN_NUMBER-${{ matrix.config.host }}"
            BITCOIN_CONFIG_ALL="--disable-dependency-tracking --prefix=$GITHUB_WORKSPACE/depends/${{ matrix.config.host }} --bindir=$OUTDIR_PATH/bin --libdir=$OUTDIR_PATH/lib"
          fi

          echo ::group::Autogen
          ./autogen.sh
          echo ::endgroup::

          mkdir build && cd build

          echo ::group::Configure
          ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL ${{ matrix.config.BITCOIN_CONFIG }} $PARAMS_FLAGS || ( cat config.log && false)
          echo ::endgroup::

          echo ::group::Distdir
          make distdir VERSION=${{ matrix.config.host }}
          echo ::endgroup::

          cd ktv-${{ matrix.config.host }}

          echo ::group::Configure
          ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL ${{ matrix.config.BITCOIN_CONFIG }} $PARAMS_FLAGS || ( cat config.log && false)
          echo ::endgroup

          echo ::group::Build
          make -j2 ${{ matrix.config.goal }} || ( echo "Build failure. Verbose build follows." && make ${{ matrix.config.goal }} V=1 ; false )
          echo ::endgroup::

          echo ::group::Security-Check
          make -j2 -C src check-security
          echo ::endgroup::

          if [ "${{matrix.config.symbol_check }}" = "true" ]; then
            echo ::group::Symbol-Check
            make -j2 -C src check-symbols
            echo ::endgroup::
          fi

          if [ "${{matrix.config.nsis }}" = "true" ]; then
            echo ::group::Nsis
            make deploy -j2
            echo ::endgroup::
          fi